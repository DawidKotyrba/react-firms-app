{"version":3,"sources":["FirmsTable.js","Pagination.js","FilterForm.js","FirmsData.js","App.js","serviceWorker.js","index.js"],"names":["FirmsTable","props","listItems","filtredFirms","slice","first","last","map","firm","className","key","id","onLoad","document","getElementById","style","display","name","city","sumIncomesValue","avgIncomesValue","lastMonthSumIncomesValue","onClick","sort","Pagination","numberOfButtons","length","firmsPerPage","barNumberArray","i","push","fullBar","num","paginate","barStart","midleBar","clickedBarNumber","moveBarLeft","moveBarRight","FilterForm","type","placeholder","onChange","filtrFirms","FirmsData","sortIncomesData","a","b","date","checkWindowWidth","width","window","innerWidth","setState","getIncomes","firms","incomes","Promise","all","axios","get","then","response","data","round","n","k","factor","Math","pow","totalIncomesValue","valueSum","parseFloat","value","valueAvg","state","lastMonthValue","substring","lastMonthSum","filter","substr","reduce","prev","curr","preloading","loadingDiv","createElement","innerHTML","body","appendChild","dynamicSort","property","sortOrder","sortFunctionBy","whatSort","isToggleOn","filtredFirmsNames","target","handleClickId","pageNumber","currentPage","indexOfLastFirm","indexOfFirstFirm","e","filteredArray","firmsNames","obj","toUpperCase","includes","currentFirms","this","res","firmsData","firmsWithData","incomesObj","addEventListener","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14745a1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FirmsTable = props => {\r\n\r\n    const listItems = props.filtredFirms.slice(props.first, props.last).map((firm) => {\r\n\r\n\r\n        /* Removing loading */\r\n\r\n\r\n        const removeLoading = () => {\r\n            const loadingDiv = document.getElementById('loader');\r\n            loadingDiv.style.display = 'none';\r\n        };\r\n\r\n        return (\r\n            <div className=\"table-row\" key={firm.id} onLoad={removeLoading()}>\r\n                <div className=\"id-cell\">{firm.id}</div>\r\n                <div className=\"item-cell\">{firm.name}</div>\r\n                <div className=\"item-cell\">{firm.city}</div>\r\n                <div className=\"item-cell\">{firm.sumIncomesValue}</div>\r\n                <div className=\"item-cell\">{firm.avgIncomesValue}</div>\r\n                <div className=\"item-cell\">{firm.lastMonthSumIncomesValue}</div>\r\n            </div>\r\n        );\r\n\r\n    });\r\n\r\n    return (\r\n\r\n        <div className=\"table-container\" >\r\n            <div className=\"table-header-row\">\r\n                <span className=\"id-cell-header\" id='id' onClick={props.sort}>Id</span>\r\n                <span className=\"item-cell-header\" id='name' onClick={props.sort}>Name</span>\r\n                <span className=\"item-cell-header\" id='city' onClick={props.sort}>City</span>\r\n                <span className=\"item-cell-header\" id='sumIncomesValue' onClick={props.sort}>Sum incomses value</span>\r\n                <span className=\"item-cell-header\" id='avgIncomesValue' onClick={props.sort}>Avg incomses value</span>\r\n                <span className=\"item-cell-header\" id='lastMonthSumIncomesValue' onClick={props.sort}>Last month Sum</span>\r\n            </div>\r\n            {listItems}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FirmsTable;","import React from 'react';\r\n\r\nconst Pagination = props => {\r\n\r\n    let numberOfButtons = props.filtredFirms.length / props.firmsPerPage;\r\n    let barNumberArray = [];\r\n\r\n    for (let i = 0; i < numberOfButtons; i++) {\r\n        barNumberArray.push(i + 1);\r\n    };\r\n\r\n\r\n    /* Check you need buttons */\r\n\r\n\r\n    if (barNumberArray.length < 7) {\r\n\r\n\r\n        /* fields found are not enough, render full bar */\r\n\r\n\r\n        const fullBar = barNumberArray.map((num, i) => {\r\n\r\n            return (\r\n                <span className=\"number\" key={i} onClick={() => { props.paginate(num) }}>{num}</span>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"numbers-bar\">\r\n                {fullBar}\r\n            </div >\r\n        );\r\n\r\n    } else {\r\n\r\n\r\n        /* there are a lot of fields found, render bar with buttons */\r\n\r\n\r\n        const barStart = barNumberArray.slice(0, 2).map((num, i) => {\r\n\r\n            return (\r\n                <span className=\"number\" key={i} onClick={() => { props.paginate(num) }}>{num}</span>\r\n            );\r\n        });\r\n\r\n\r\n        const midleBar = barNumberArray.slice(props.clickedBarNumber - 2, props.clickedBarNumber + 2).map((num, i) => {\r\n\r\n            return (\r\n                <span className=\"number\" key={i} onClick={() => { props.paginate(num) }}>{num}</span>\r\n            );\r\n        });\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"numbers-bar\">\r\n                {barStart}\r\n                <button className=\"number arrows\" onClick={props.moveBarLeft}>&#x2190;</button>\r\n                {midleBar}\r\n                <button className=\"number arrows\" onClick={props.moveBarRight}>&#x2192;</button>\r\n            </div >\r\n        );\r\n    };\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\n\r\nconst FilterForm = props => {\r\n    return (\r\n        <form>\r\n            <h2>Shearch</h2>\r\n            <input className=\"search-input\" type=\"text\" placeholder=\"Write Name or City\" onChange={props.filtrFirms} />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FilterForm;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport FirmsTable from './FirmsTable';\r\nimport Pagination from './Pagination';\r\nimport FilterForm from './FilterForm';\r\n\r\nclass FirmsData extends Component {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.state = {\r\n            firmsNames: [],\r\n            filtredFirmsNames: [],\r\n            currentFirms: [],\r\n\r\n            currentPage: 1,\r\n            firmsPerPage: 10,\r\n\r\n            isToggleOn: true,\r\n        };\r\n\r\n    };\r\n\r\n    handleClickId() {\r\n        this.setState(state => ({\r\n            isToggleOn: !state.isToggleOn,\r\n        }));\r\n    };\r\n\r\n\r\n    /* Function to sort */\r\n\r\n\r\n    sortIncomesData = (a, b) => {\r\n        if (a.date < b.date) {\r\n            return -1;\r\n        };\r\n        if (a.date > b.date) {\r\n            return 1;\r\n        };\r\n        return 0;\r\n    };\r\n\r\n\r\n    /* Change firms per page to window width */\r\n\r\n\r\n    checkWindowWidth = () => {\r\n        let width = window.innerWidth;\r\n        if (width <= 433) {\r\n            this.setState({ firmsPerPage: 1 });\r\n        } else if (width <= 575) {\r\n            this.setState({ firmsPerPage: 2 });\r\n        } else if (width <= 855) {\r\n            this.setState({ firmsPerPage: 3 });\r\n        } else {\r\n            this.setState({ firmsPerPage: 10 });\r\n        }\r\n        this.paginate(1)\r\n    };\r\n\r\n\r\n    /* Geting data from API */\r\n\r\n\r\n    getIncomes = async firms => {\r\n\r\n\r\n        let incomes = [];\r\n        await Promise.all(firms.map(firm =>\r\n            axios.get(`https://recruitment.hal.skygate.io/incomes/` + firm.id).then(response => {\r\n                incomes.push(response.data);\r\n            })\r\n        ));\r\n        return incomes;\r\n\r\n    };\r\n\r\n\r\n    /* Calculation of values */\r\n\r\n\r\n    round = (n, k) => {\r\n        let factor = Math.pow(10, k + 1);\r\n        n = Math.round(Math.round(n * factor) / 10);\r\n        return n / (factor / 10);\r\n    };\r\n\r\n\r\n    totalIncomesValue = incomes => {\r\n\r\n        let valueSum = 0;\r\n\r\n        for (let i = 0; i < incomes.length; i++) {\r\n            valueSum += parseFloat(incomes[i].value);\r\n        };\r\n        this.setState({ valueSum: valueSum });\r\n        return this.round(valueSum, 2);\r\n    };\r\n\r\n\r\n    avgIncomesValue = incomes => {\r\n        let valueAvg = 0;\r\n\r\n        valueAvg = this.state.valueSum / incomes.length;\r\n\r\n        return this.round(valueAvg, 2);\r\n    };\r\n\r\n\r\n    lastMonthValue = incomes => {\r\n        incomes.sort(this.sortIncomesData);\r\n\r\n        let last = incomes[incomes.length - 1].date.substring(7, 0);\r\n\r\n        const lastMonthSum = incomes.filter(i => {\r\n            const date = i.date.substr(0, 7);\r\n\r\n            return date.substring(7, 0) === last;\r\n        }).reduce((prev, curr) => prev + parseFloat(curr.value), 0);\r\n\r\n        return this.round(lastMonthSum, 2);\r\n    };\r\n\r\n\r\n    /* Preloading */\r\n\r\n\r\n    preloading = () => {\r\n        const loadingDiv = document.createElement(\"div\");\r\n        loadingDiv.id = 'loader';\r\n        loadingDiv.innerHTML = \"LOADING\";\r\n        document.body.appendChild(loadingDiv);\r\n    };\r\n\r\n\r\n    /* Getting incomes data */\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.preloading()\r\n\r\n        axios.get(`https://recruitment.hal.skygate.io/companies`)\r\n            .then(res => {\r\n                const firmsData = res.data;\r\n\r\n                let firmsWithData = [];\r\n\r\n                this.getIncomes(firmsData).then(incomesObj => {\r\n\r\n                    for (let i = 0; i < firmsData.length; i++) {\r\n                        firmsData[i].incomes = incomesObj[i].incomes;\r\n                        firmsData[i].sumIncomesValue = this.totalIncomesValue(incomesObj[i].incomes);\r\n                        firmsData[i].avgIncomesValue = this.avgIncomesValue(incomesObj[i].incomes);\r\n                        firmsData[i].lastMonthSumIncomesValue = this.lastMonthValue(incomesObj[i].incomes);\r\n\r\n                        firmsWithData.push(firmsData[i]);\r\n                    };\r\n\r\n                    this.setState({ firmsNames: firmsWithData });\r\n                    this.setState({ filtredFirmsNames: firmsWithData });\r\n\r\n                    this.setState({ clickedBarNumber: 4 });\r\n\r\n                });\r\n\r\n                this.paginate(1);\r\n\r\n            });\r\n\r\n        this.checkWindowWidth();\r\n        window.addEventListener(\"resize\", this.checkWindowWidth);\r\n\r\n    };\r\n\r\n\r\n    /* Sorting array */\r\n\r\n\r\n    dynamicSort = property => {\r\n        var sortOrder = 1;\r\n        if (property[0] === \"-\") {\r\n            sortOrder = -1;\r\n            property = property.substr(1);\r\n        };\r\n        return function (a, b) {\r\n            var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\r\n            return result * sortOrder;\r\n        };\r\n    };\r\n\r\n\r\n    sortFunctionBy = whatSort => {\r\n        if (this.state.isToggleOn) {\r\n            this.setState({ filtredFirmsNames: this.state.filtredFirmsNames.sort(this.dynamicSort(whatSort.target.id)) });\r\n            this.handleClickId();\r\n        } else {\r\n            this.setState({ filtredFirmsNames: this.state.filtredFirmsNames.sort(this.dynamicSort(\"-\" + whatSort.target.id)) });\r\n            this.handleClickId();\r\n        };\r\n    };\r\n\r\n\r\n    /* Pagination */\r\n\r\n\r\n    paginate = pageNumber => {\r\n        this.setState({\r\n            currentPage: pageNumber,\r\n            indexOfLastFirm: pageNumber * this.state.firmsPerPage,\r\n            indexOfFirstFirm: pageNumber * this.state.firmsPerPage - this.state.firmsPerPage\r\n        });\r\n    };\r\n\r\n\r\n    moveBarLeft = () => {\r\n        if (this.state.clickedBarNumber === 4) {\r\n\r\n        } else {\r\n            this.setState({ clickedBarNumber: this.state.clickedBarNumber - 1 });\r\n        };\r\n    };\r\n\r\n\r\n    moveBarRight = () => {\r\n        if (this.state.clickedBarNumber === Math.round(this.state.filtredFirmsNames.length / this.state.firmsPerPage - 1)) {\r\n\r\n        } else {\r\n            this.setState({ clickedBarNumber: this.state.clickedBarNumber + 1 });\r\n        };\r\n    };\r\n\r\n\r\n    /* Input filter */\r\n\r\n\r\n    filtrFirms = e => {\r\n        this.setState({})\r\n        let filteredArray = this.state.firmsNames.filter(obj => {\r\n            return obj.city.toUpperCase().includes(e.target.value.toUpperCase()) || obj.name.toUpperCase().includes(e.target.value.toUpperCase())\r\n        });\r\n\r\n        this.setState({\r\n            filtredFirmsNames: filteredArray,\r\n        });\r\n        this.paginate(1);\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"page-container\" >\r\n                <FilterForm filtrFirms={this.filtrFirms} />\r\n                <FirmsTable\r\n                    first={this.state.indexOfFirstFirm}\r\n                    last={this.state.indexOfLastFirm}\r\n                    sort={this.sortFunctionBy}\r\n                    filtredFirms={this.state.filtredFirmsNames} />\r\n                <Pagination\r\n                    filtredFirms={this.state.filtredFirmsNames}\r\n                    firmsPerPage={this.state.firmsPerPage}\r\n                    paginate={this.paginate}\r\n                    moveBarLeft={this.moveBarLeft}\r\n                    moveBarRight={this.moveBarRight}\r\n                    clickedBarNumber={this.state.clickedBarNumber} />\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default FirmsData;","import React from 'react';\r\nimport './App.css';\r\nimport FirmsData from './FirmsData';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" >\r\n      <FirmsData />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}